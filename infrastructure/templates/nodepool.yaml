---
apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: {{ .Values.clusterName }}-nodepool
spec:
  # Template for node configuration
  template:
    metadata:
      labels:
        karpenter.sh/nodepool: {{ .Values.clusterName }}-nodepool
        {{- range $key, $value := .Values.tags }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
    spec:
      # Instance requirements
      requirements:
        {{- if .Values.karpenter.nodePool.capacityTypes }}
        - key: karpenter.sh/capacity-type
          operator: In
          values: {{ .Values.karpenter.nodePool.capacityTypes | toJson }}
        {{- end }}
        {{- if .Values.karpenter.nodePool.instanceTypes }}
        - key: node.kubernetes.io/instance-type
          operator: In
          values: {{ .Values.karpenter.nodePool.instanceTypes | toJson }}
        {{- end }}
        {{- if .Values.karpenter.nodePool.architectures }}
        - key: kubernetes.io/arch
          operator: In
          values: {{ .Values.karpenter.nodePool.architectures | toJson }}
        {{- end }}
        - key: kubernetes.io/os
          operator: In
          values: ["linux"]
      
      # Node configuration
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: {{ .Values.clusterName }}-nodeclass
      
      # Instance profile for IAM permissions
      instanceProfile: eksctl-KarpenterNodeInstanceProfile-{{ .Values.clusterName }}
      
      # User data script
      userData: {{ .Values.karpenter.nodePool.userData | quote }}
      
      # Taints (optional)
      taints: []
      
      # Startup taints (removed after node ready)
      startupTaints:
        - key: karpenter.sh/not-ready
          value: "true"
          effect: NoSchedule
  
  # Disruption settings
  disruption:
    consolidationPolicy: {{ .Values.karpenter.nodePool.disruption.consolidationPolicy }}
    expireAfter: {{ .Values.karpenter.nodePool.disruption.expireAfter }}
  
  # Resource limits
  limits:
    cpu: {{ .Values.karpenter.nodePool.limits.cpu }}
    memory: {{ .Values.karpenter.nodePool.limits.memory }}

---
# EC2NodeClass for AWS-specific configuration
apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: {{ .Values.clusterName }}-nodeclass
spec:
  # AMI selection (uses latest EKS-optimized AMI)
  amiSelectorTerms:
    - alias: al2023@latest # Amazon Linux 2023
  
  # Instance configuration
  instanceStorePolicy: RAID0
  
  # Network configuration
  subnetSelectorTerms:
    - tags:
        kubernetes.io/role/internal-elb: "1"
  
  securityGroupSelectorTerms:
    - tags:
        karpenter.sh/discovery: {{ .Values.clusterName }}
  
  # Storage configuration - Native EBS encryption support in Karpenter v1.0+
  blockDeviceMappings:
    - deviceName: /dev/xvda
      ebs:
        volumeSize: {{ .Values.managedNodeGroup.volumeSize | quote }}Gi
        volumeType: {{ .Values.managedNodeGroup.volumeType }}
        encrypted: {{ .Values.managedNodeGroup.volumeEncrypted }}
        deleteOnTermination: true
  
  # Instance metadata options
  instanceMetadataOptions:
    httpEndpoint: enabled
    httpProtocolIPv6: disabled
    httpPutResponseHopLimit: 1
    httpTokens: required # IMDSv2 only
  
  # User data (merged with NodePool userData)
  userData: |
    #!/bin/bash
    # Additional user data can be added here